# DATASOURCE (DataSourceAutoConfiguration & DataSourceProperties)
spring.datasource.type=com.zaxxer.hikari.HikariDataSource
#spring.datasource.name= # name of the data source
#spring.datasource.initialize=true # populate using data.sql
#spring.datasource.schema= # a schema (DDL) script resource reference
#spring.datasource.data= # a data (DML) script resource reference
#spring.datasource.platform= # the platform to use in the schema resource (schema-${platform}.sql)
#spring.datasource.continueOnError=false # continue even if can't be initialized
#spring.datasource.separator=; # statement separator in SQL initialization scripts
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
#172.21.14.16
spring.datasource.url=jdbc:mysql://172.21.14.16:3306/catchman
spring.datasource.username=root
spring.datasource.password=123456
spring.datasource.hikari.minimum-idle=2
spring.datasource.hikari.maximum-pool-size=10
#spring.datasource.hikari.idle-timeout=10000
#spring.datasource.validation-query=
#spring.datasource.test-on-borrow=false
#spring.datasource.test-on-return=false
#spring.datasource.test-while-idle=
#spring.datasource.time-between-eviction-runs-millis=
#spring.datasource.min-evictable-idle-time-millis=
#spring.datasource.max-wait-millis=

#Redis
spring.redis.database=0
#172.21.14.17
spring.redis.host=172.21.14.17
spring.redis.port=6379
#spring.redis.password= # Login password of the redis server.
spring.redis.pool.max-active=8
spring.redis.pool.max-idle=8
spring.redis.pool.max-wait=-1
spring.redis.pool.min-idle=0
#spring.redis.sentinel.master= # Name of Redis server.
#spring.redis.sentinel.nodes= # Comma-separated list of host:port pairs.
spring.redis.timeout=0


#MyBatis
mybatis.mapper-locations=classpath*:/mapper/*Mapper.xml
mybatis.type-aliases-package=com.roside.mybatis.entity

#logger
logging.level.com.roside=DEBUG
logging.level.org.mybatis=DEBUG
logging.level.com.roside.mybatis.mapper=DEBUG
logging.level.org.springframework.boot.autoconfigure.security=DEBUG
logging.level.org.springframework.security=DEBUG

#Swagger
#springfox.documentation.swagger.v2.path=/api-docs

server.session.timeout=5
#JWT
jwt.token.header=X-Auth-Token
jwt.token.secret=ShouldIsayThat?
# expiration 1 week (1 day : 86400)
jwt.token.expiration=604800  
jwt.token.origin=local


#tomcat
# Maximum amount of worker threads.
server.tomcat.max-threads=128
# Minimum amount of worker threads.
server.tomcat.min-spare-threads=64

#undertow
# 设置IO线程数, 它主要执行非阻塞的任务,它们会负责多个连接, 默认设置每个CPU核心一个线程
#server.undertow.io-threads=4
# 阻塞任务线程池, 当执行类似servlet请求阻塞操作, undertow会从这个线程池中取得线程,它的值设置取决于系统的负载
#server.undertow.worker-threads=20
# 以下的配置会影响buffer,这些buffer会用于服务器连接的IO操作,有点类似netty的池化内存管理
# 每块buffer的空间大小,越小的空间被利用越充分
#server.undertow.buffer-size=1024
# 每个区分配的buffer数量 , 所以pool的大小是buffer-size * buffers-per-region
#server.undertow.buffers-per-region=1024
# 是否分配的直接内存
#server.undertow.direct-buffers=true